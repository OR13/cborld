#!/usr/bin/env node
/*!
 * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

const cborld = require('.');
const documentLoader = cborld.documentLoader;
const fsp = require('fs').promises;

// run the program
main();

async function main() {
  require('yargs')
    .usage('Usage: $0 <command>')
    .option('verbose', {
      describe: 'Provide verbose logging',
      alias: 'v',
      boolean: true
    })
    .option('diagnose', {
      describe: 'Provide diagnostic output',
      alias: 'd',
      boolean: true
    })
    .alias('h', 'help')
    .help('help', 'Show help for cborld command.')
    .command('encode [options] <file>', 'Encode a JSON-LD file to CBOR-LD',
      yargs => {
        yargs
          .option('context', {
            describe: 'List of context URLs to compress.',
            alias: 'c',
            type: 'array',
            default: []
          })
          .option('transform', {
            describe: 'List of custom <term>:<transform>s to apply. ' +
              'Transforms: ' + cborld.getTermCodecs().join(', '),
            alias: 't',
            type: 'array',
            default: []
          })
          .option('output', {
            describe: 'Write output to filename.',
            alias: 'o',
            type: 'string',
            default: 'out.cborld'
          })
          .positional('file', {
            describe: 'The JSON-LD file to encode.',
            type: 'string'
          })
          .example([
            ['$0 encode example.jsonld',
              'Encode example.jsonld to out.cborld'],
            ['$0 encode example.jsonld -v -d',
              'Encode example.jsonld showing diagnostic output'],
            ['$0 encode example.jsonld -v -d -t proofValue:base64Pad ' +
              '-c https://example.com/example/v1',
            'Encode with custom term transform and context']
          ]);
      }, encodeCommand)
    .alias('e', 'encode')
    .command('decode [options] <file>', 'Decode a CBOR-LD file to JSON-LD',
      yargs => {
        yargs
          .option('context', {
            describe: 'List of context URLs to expand.',
            alias: 'c',
            type: 'array',
            default: []
          })
          .option('transform', {
            describe: 'List of custom <term>:<transform>s to apply. ' +
              'Transforms: ' + cborld.getTermCodecs().join(', '),
            alias: 't',
            type: 'array',
            default: []
          })
          .option('output', {
            describe: 'Write output to filename.',
            alias: 'o',
            type: 'string',
            default: 'out.jsonld'
          })
          .positional('file', {
            describe: 'The CBOR-LD file to decode.',
            type: 'string'
          })
          .example([
            ['$0 decode example.cborld',
              'Decode example.cborld to out.jsonld'],
            ['$0 encode example.cborld -v -d',
              'Decode example.jsonld showing diagnostic output'],
            ['$0 encode example.cborld -v -d -t proofValue:base64Pad ' +
              '-c https://example.com/example/v1',
            'Decode with custom term transform and context']
          ]);
      }, decodeCommand)
    .alias('d', 'decode')
    .example([
      ['$0 encode example.jsonld',
        'Encode example.jsonld to out.cborld'],
      ['$0 encode example.jsonld -v -d',
        'Encode example.jsonld showing diagnostic output']
    ])
    .argv;
}

// Yars command to encode a given JSON-LD document to CBOR-LD
async function encodeCommand(args) {
  try {
    const jsonldBytes = await fsp.readFile(args.file);
    const jsonldDocument = JSON.parse(jsonldBytes);
    const {appContextMap, appTermMap} = _getAppMaps(args);

    // encode to CBOR-LD
    const cborldBytes = await cborld.encode({
      jsonldDocument,
      documentLoader,
      appContextMap,
      appTermMap,
      diagnose: (args.diagnose) ? console.log : undefined
    });
    await fsp.writeFile(args.output, cborldBytes);

    if(args.verbose) {
      const ratio = 100 - (cborldBytes.length / jsonldBytes.length) * 100;
      console.log(`${jsonldBytes.length} JSON-LD input bytes, ` +
        `${cborldBytes.length} CBOR-LD output bytes, ` +
        `${ratio.toFixed(0)}% smaller.`);
    }

    console.log(`Wrote CBOR-LD output to '${args.output}'.`);
  } catch(e) {
    console.error(e.stack);
    process.exit(1);
  }
}

function _getAppMaps(args) {
  const appMaps = {};
  // build the application context map
  if(args.context) {
    appMaps.appContextMap = new Map();
    args.context.forEach(
      (element, i) => appMaps.appContextMap.set(element, 0x8000 + i));
  }

  // build the application term transforms map
  if(args.transform) {
    appMaps.appTermMap = new Map();
    args.transform.forEach(element => {
      const [term, transform] = element.split(':');
      appMaps.appTermMap.set(term, transform);
    });
  }

  return appMaps;
}

// Yars command to decode given CBOR-LD bytes to a JSON-LD document
async function decodeCommand(args) {
  try {
    const cborldBytes = await fsp.readFile(args.file);
    const {appContextMap} = _getAppMaps(args);

    // encode to CBOR-LD
    const jsonldDocument = await cborld.decode({
      cborldBytes,
      documentLoader,
      appContextMap,
      diagnose: (args.diagnose) ? console.log : undefined
    });
    const jsonldBytes = JSON.stringify(jsonldDocument, null, 2);
    await fsp.writeFile(args.output, jsonldBytes);

    if(args.verbose) {
      const ratio = ((jsonldBytes.length / cborldBytes.length) * 100) - 100;
      console.log(`${cborldBytes.length} CBOR-LD input bytes, ` +
        `${jsonldBytes.length} JSON-LD output bytes, ` +
        `${ratio.toFixed(0)}% larger.`);
    }

    console.log(`Wrote JSON-LD output to '${args.output}'.`);
  } catch(e) {
    console.error(e.stack);
    process.exit(1);
  }
}
