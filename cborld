#!/usr/bin/env node
/*!
 * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.
 */
const cborld = require('.');
const fs = require('fs').promises;

// FIXME: Remove eventually
async function documentLoader(url) {
  let result;

  if(url === 'https://www.w3.org/ns/activitystreams') {
    result = JSON.parse(await fs.readFile('activitystreams.jsonld'));
  } else {
    throw new Error('Could not fetch JSON-LD Context: ' + url);
  }

  return result;
}

// Yars command to encode a given JSON-LD document to CBOR-LD
async function encodeCommand(args) {
  try {
    const jsonldBytes = await fs.readFile(args.file);
    const jsonldDocument = JSON.parse(jsonldBytes);
    const options = {documentLoader, diagnose: args.verbose};
    const cborldBytes = await cborld.encode({jsonldDocument, options});
    await fs.writeFile('out.cborld', cborldBytes);

    if(args.verbose) {
      const ratio = 100 - (cborldBytes.length / jsonldBytes.length) * 100;
      console.log(`${jsonldBytes.length} JSON-LD input bytes, ` +
        `${cborldBytes.length} CBOR-LD output bytes, ` +
        `${ratio.toFixed(0)}% compression.`);
    }

    console.log(`Wrote CBOR-LD output to '${args.output}'.`);
  } catch(e) {
    console.error(e.stack);
    process.exit(1);
  }
}

async function main() {
  require('yargs')
    .usage('Usage: $0 <command>')
    .option('verbose', {
      describe: 'Provide verbose logging',
      type: 'boolean',
      default: false
    })
    .option('diagnose', {
      describe: 'Provide diagnostic output',
      type: 'boolean',
      default: false
    })
    .alias('h', 'help')
    .help('help', 'Show help for cborld command.')
    .command('encode [options] <file>', 'Encode a JSON-LD file to CBOR-LD',
      yargs => {
        yargs
          .positional('file', {
            describe: 'The JSON-LD file to encode.',
            type: 'string'
          })
          .option('output', {
            describe: 'Write output to filename.',
            alias: 'o',
            type: 'string',
            default: 'out.cborld'
          });
      }, encodeCommand)
    .alias('e', 'encode')
    .argv;
}

main();
